"""
Script to get piazza's to csv matching
"""
import numpy as np
from utils import save_json, load_json

from bot.piazza_code import PiazzaBot
from data_loader import DataLoader

import time


def find_title_matches(csv_path, matches_save_path, piazza_bot):
    """
    Generate a list of posts from a piazza forum and find if they match with those
    from a pre-existing corpus based on title

    :param csv_path: path to csv containing posts dataset
    :param matches_save_path: path to save matches as
    :param piazza_bot: piazza bot instance with login and forum specified
    :return: None, saves a match dict, {id : post information} at matches_save_path
    """
    # load posts
    data_loader = DataLoader()
    data_loader.load(csv_path)

    df = data_loader.get_data()
    qs, _ = DataLoader.filter_latest_questions(df, subject=True)

    # iterate through all questions
    matchs = {}

    posts = piazza_bot.network.iter_all_posts()
    counter = 0
    for post in posts:
        db_dict = piazza_bot.create_db_dict(post, None, False)
        if db_dict is None:
            continue
        try:
            subject = db_dict["subject"]
            content = db_dict["content"]
            cid = db_dict["cid"]

            for q in qs:
                if q[2] == subject:
                    match = {"idx": q[0],
                             "cid": cid,
                             "content": content,
                             "subject": subject}

                    matchs[cid] = match

            if counter % 50 == 0:
                time.sleep(5)
                save_json(matchs, matches_save_path + str(counter) + ".json")
            time.sleep(1)
            counter += 1

        except KeyError:
            continue

    if not matches_save_path.endswith(".json"):
        matches_save_path += ".json"
    save_json(matchs, matches_save_path)


def update_csv(matches_path, csv_path):
    """
    Updates csv (df) with matches found

    :param matches_path: path to matches as generated by the find_title_matches() method
    :param csv_path: path to our dataset
    :return: None, updates the datset at csv_path with a field that contains the id of the post (if applicable)
    """
    # load posts and matches
    data_loader = DataLoader()
    data_loader.load(csv_path)
    df = data_loader.get_data()

    id_to_index = load_json(matches_path)

    # map index to id for updating
    index_to_id = {}
    for key, val in id_to_index.items():
        index_to_id[val["idx"]] = key

    # create column with ids
    df["id"] = ""
    for i, row in df.iterrows():
        if i in index_to_id:
            df.at[i, "id"] = index_to_id[i]

    df.to_csv(csv_path)


if __name__ == "__main__":
    # posts_path = r"C:\Users\sohai\Documents\Uni 2020\csc392\CSC108&148v2\CSC108&148v2\csc148h5_spring2020_2020-05-03\anon.contributions.csv"
    # save_path = r"C:\Users\sohai\Documents\Uni 2020\csc392\CSC108&148v2\CSC108&148v2\csc148h5_spring2020_2020-05-03\matchs"
    #
    # # start piazza bot
    # login = np.loadtxt(r"C:\Users\sohai\Documents\Uni 2020\csc392\login.txt", dtype=str)
    # piazza_bot = PiazzaBot(login[0], login[1], "kg9odngyfny6s9")
    #
    # find_title_matches(posts_path, save_path, piazza_bot)

    posts_path = r"C:\Users\karlc\Documents\ut\_y4\CSC492\CSC108&148v2\csc148h5_spring2020_2020-05-03\anon.contributions.csv"
    matches_path = r"C:\Users\karlc\Documents\ut\_y4\CSC492\CSC108&148v2\csc148h5_spring2020_2020-05-03\matchs.json"

    update_csv(matches_path, posts_path)
